{
	"id": "CVE-2025-21939",
	"sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
	"vulnStatus": "Awaiting Analysis",
	"published": "2025-04-01T16:15:24.773",
	"lastModified": "2025-04-01T20:26:01.990",
	"descriptions": [
		{
			"lang": "en",
			"value": "In the Linux kernel, the following vulnerability has been resolved:\n\ndrm/xe/hmm: Don't dereference struct page pointers without notifier lock\n\nThe pnfs that we obtain from hmm_range_fault() point to pages that\nwe don't have a reference on, and the guarantee that they are still\nin the cpu page-tables is that the notifier lock must be held and the\nnotifier seqno is still valid.\n\nSo while building the sg table and marking the pages accesses / dirty\nwe need to hold this lock with a validated seqno.\n\nHowever, the lock is reclaim tainted which makes\nsg_alloc_table_from_pages_segment() unusable, since it internally\nallocates memory.\n\nInstead build the sg-table manually. For the non-iommu case\nthis might lead to fewer coalesces, but if that's a problem it can\nbe fixed up later in the resource cursor code. For the iommu case,\nthe whole sg-table may still be coalesced to a single contigous\ndevice va region.\n\nThis avoids marking pages that we don't own dirty and accessed, and\nit also avoid dereferencing struct pages that we don't own.\n\nv2:\n- Use assert to check whether hmm pfns are valid (Matthew Auld)\n- Take into account that large pages may cross range boundaries\n  (Matthew Auld)\n\nv3:\n- Don't unnecessarily check for a non-freed sg-table. (Matthew Auld)\n- Add a missing up_read() in an error path. (Matthew Auld)\n\n(cherry picked from commit ea3e66d280ce2576664a862693d1da8fd324c317)"
		},
		{
			"lang": "es",
			"value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: drm/xe/hmm: No desreferenciar punteros de página de estructura sin bloqueo de notificador Los pnfs que obtenemos de hmm_range_fault() apuntan a páginas en las que no tenemos una referencia, y la garantía de que aún están en las tablas de páginas de la CPU es que el bloqueo del notificador debe mantenerse y el seqno del notificador aún es válido. Entonces, mientras construimos la tabla sg y marcamos las páginas como accedidas/sucias, necesitamos mantener este bloqueo con un seqno validado. Sin embargo, el bloqueo está contaminado por recuperación, lo que hace que sg_alloc_table_from_pages_segment() sea inutilizable, ya que asigna memoria internamente. En su lugar, construya la tabla sg manualmente. Para el caso que no es iommu, esto podría llevar a menos coalescencias, pero si eso es un problema, se puede arreglar más adelante en el código del cursor de recursos. En el caso de iommu, toda la tabla sg puede fusionarse en una única región va de dispositivo contiguo. Esto evita marcar páginas que no son de nuestra propiedad como sucias y accedidas, y también evita desreferenciar páginas de estructura que no son de nuestra propiedad. v2: - Usar assert para comprobar si las funciones de función de enlace de hmm son válidas (Matthew Auld). - Tener en cuenta que las páginas grandes pueden cruzar los límites de rango (Matthew Auld). v3: - No comprobar innecesariamente si hay una tabla sg no liberada (Matthew Auld). - Añadir una función up_read() faltante en una ruta de error (Matthew Auld). (Seleccionado de el commit ea3e66d280ce2576664a862693d1da8fd324c317)."
		}
	],
	"references": [
		{
			"source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
			"url": "https://git.kernel.org/stable/c/0a98219bcc961edd3388960576e4353e123b4a51"
		},
		{
			"source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
			"url": "https://git.kernel.org/stable/c/2a24c98f0e4cc994334598d4f3a851972064809d"
		},
		{
			"source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
			"url": "https://git.kernel.org/stable/c/f9326f529da7298a95643c3267f1c0fdb0db55eb"
		}
	],
	"metrics": {},
	"vcConfigurations": [
		{
			"nodes": [
				{
					"operator": "OR",
					"cpeMatch": [
						{
							"vulnerable": true,
							"criteria": "cpe:2.3:o:linux:linux_kernel:6.10:*:*:*:*:*:*:*",
							"matchCriteriaId": ""
						},
						{
							"vulnerable": true,
							"criteria": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*",
							"matchCriteriaId": "",
							"versionStartIncluding": "6.12",
							"versionEndExcluding": "6.12.19"
						},
						{
							"vulnerable": true,
							"criteria": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*",
							"matchCriteriaId": "",
							"versionStartIncluding": "6.13",
							"versionEndExcluding": "6.13.7"
						}
					]
				}
			]
		}
	],
	"vcVulnerableCPEs": [
		"cpe:2.3:o:linux:linux_kernel:6.10:*:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.12.10:*:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.12.11:*:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.12.12:*:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.12.13:*:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.12.14:*:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.12.16:*:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.12.17:*:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.12.18:*:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.12.1:*:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.12.2:*:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.12.3:*:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.12.4:*:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.12.5:*:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.12.6:*:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.12.7:*:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.12.8:*:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.12.9:*:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.12:*:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.12:-:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.12:rc1:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.12:rc2:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.12:rc3:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.12:rc4:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.12:rc5:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.12:rc6:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.12:rc7:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.13.1:*:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.13.2:*:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.13.3:*:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.13.4:*:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.13.5:*:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.13.6:*:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.13:*:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.13:-:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.13:rc1:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.13:rc2:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.13:rc3:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.13:rc4:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.13:rc5:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.13:rc6:*:*:*:*:*:*",
		"cpe:2.3:o:linux:linux_kernel:6.13:rc7:*:*:*:*:*:*"
	]
}
