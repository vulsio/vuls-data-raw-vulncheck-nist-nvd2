{
	"id": "CVE-2024-24576",
	"sourceIdentifier": "security-advisories@github.com",
	"vulnStatus": "Awaiting Analysis",
	"published": "2024-04-09T18:15:08.420",
	"lastModified": "2024-11-21T08:59:27.443",
	"descriptions": [
		{
			"lang": "en",
			"value": "Rust is a programming language. The Rust Security Response WG was notified that the Rust standard library prior to version 1.77.2 did not properly escape arguments when invoking batch files (with the `bat` and `cmd` extensions) on Windows using the `Command`. An attacker able to control the arguments passed to the spawned process could execute arbitrary shell commands by bypassing the escaping. The severity of this vulnerability is critical for those who invoke batch files on Windows with untrusted arguments. No other platform or use is affected.\n\nThe `Command::arg` and `Command::args` APIs state in their documentation that the arguments will be passed to the spawned process as-is, regardless of the content of the arguments, and will not be evaluated by a shell. This means it should be safe to pass untrusted input as an argument.\n\nOn Windows, the implementation of this is more complex than other platforms, because the Windows API only provides a single string containing all the arguments to the spawned process, and it's up to the spawned process to split them. Most programs use the standard C run-time argv, which in practice results in a mostly consistent way arguments are splitted.\n\nOne exception though is `cmd.exe` (used among other things to execute batch files), which has its own argument splitting logic. That forces the standard library to implement custom escaping for arguments passed to batch files. Unfortunately it was reported that our escaping logic was not thorough enough, and it was possible to pass malicious arguments that would result in arbitrary shell execution.\n\nDue to the complexity of `cmd.exe`, we didn't identify a solution that would correctly escape arguments in all cases. To maintain our API guarantees, we improved the robustness of the escaping code, and changed the `Command` API to return an `InvalidInput` error when it cannot safely escape an argument. This error will be emitted when spawning the process.\n\nThe fix is included in Rust 1.77.2. Note that the new escaping logic for batch files errs on the conservative side, and could reject valid arguments. Those who implement the escaping themselves or only handle trusted inputs on Windows can also use the `CommandExt::raw_arg` method to bypass the standard library's escaping logic. "
		},
		{
			"lang": "es",
			"value": "Rust es un lenguaje de programación. Se notificó al Grupo de Trabajo de Respuesta de Seguridad de Rust que la librería estándar de Rust anterior a la versión 1.77.2 no escapaba correctamente a los argumentos al invocar archivos por lotes (con las extensiones `bat` y `cmd`) en Windows usando el `Comando`. Un atacante capaz de controlar los argumentos pasados al proceso generado podría ejecutar comandos de shell arbitrarios evitando el escape. La gravedad de esta vulnerabilidad es crítica para quienes invocan archivos por lotes en Windows con argumentos que no son de confianza. Ninguna otra plataforma o uso se ve afectado. Las API `Command::arg` y `Command::args` establecen en su documentación que los argumentos se pasarán al proceso generado tal cual, independientemente del contenido de los argumentos, y no serán evaluados por un shell. Esto significa que debería ser seguro pasar entradas que no sean de confianza como argumento. En Windows, la implementación de esto es más compleja que en otras plataformas, porque la API de Windows solo proporciona una única cadena que contiene todos los argumentos del proceso generado, y depende del proceso generado dividirlos. La mayoría de los programas utilizan el argv estándar en tiempo de ejecución de C, que en la práctica da como resultado una forma mayoritariamente consistente de dividir los argumentos. Sin embargo, una excepción es `cmd.exe` (utilizado, entre otras cosas, para ejecutar archivos por lotes), que tiene su propia lógica de división de argumentos. Eso obliga a la librería estándar a implementar un escape personalizado para los argumentos pasados a archivos por lotes. Desafortunadamente, se informó que nuestra lógica de escape no era lo suficientemente exhaustiva y era posible pasar argumentos maliciosos que darían como resultado una ejecución arbitraria del shell. Debido a la complejidad de `cmd.exe`, no identificamos una solución que escapara correctamente de los argumentos en todos los casos. Para mantener nuestras garantías de API, mejoramos la solidez del código de escape y cambiamos la API `Command` para que devuelva un error [`InvalidInput`][4] cuando no puede escapar de forma segura de un argumento. Este error se emitirá al generar el proceso. La solución está incluida en Rust 1.77.2. Tenga en cuenta que la nueva lógica de escape para archivos por lotes es conservadora y podría rechazar argumentos válidos. Aquellos que implementan el escape ellos mismos o solo manejan entradas confiables en Windows también pueden usar el método `CommandExt::raw_arg` para evitar la lógica de escape de la librería estándar."
		}
	],
	"references": [
		{
			"source": "security-advisories@github.com",
			"url": "http://www.openwall.com/lists/oss-security/2024/04/09/16"
		},
		{
			"source": "security-advisories@github.com",
			"url": "https://doc.rust-lang.org/std/io/enum.ErrorKind.html#variant.InvalidInput"
		},
		{
			"source": "security-advisories@github.com",
			"url": "https://doc.rust-lang.org/std/os/windows/process/trait.CommandExt.html#tymethod.raw_arg"
		},
		{
			"source": "security-advisories@github.com",
			"url": "https://doc.rust-lang.org/std/process/struct.Command.html"
		},
		{
			"source": "security-advisories@github.com",
			"url": "https://doc.rust-lang.org/std/process/struct.Command.html#method.arg"
		},
		{
			"source": "security-advisories@github.com",
			"url": "https://doc.rust-lang.org/std/process/struct.Command.html#method.args"
		},
		{
			"source": "security-advisories@github.com",
			"url": "https://github.com/rust-lang/rust/issues"
		},
		{
			"source": "security-advisories@github.com",
			"url": "https://github.com/rust-lang/rust/security/advisories/GHSA-q455-m56c-85mh"
		},
		{
			"source": "security-advisories@github.com",
			"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/N323QAEEUVTJ354BTVQ7UB6LYXUX2BCL/"
		},
		{
			"source": "security-advisories@github.com",
			"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/RPH3PF7DVSS2LVIRLW254VWUPVKJN46P/"
		},
		{
			"source": "security-advisories@github.com",
			"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/W7WRFOIAZXYUPGXGR5UEEW7VTTOD4SZ3/"
		},
		{
			"source": "security-advisories@github.com",
			"url": "https://www.rust-lang.org/policies/security"
		},
		{
			"source": "af854a3a-2127-422b-91ae-364da2661108",
			"url": "http://www.openwall.com/lists/oss-security/2024/04/09/16"
		},
		{
			"source": "af854a3a-2127-422b-91ae-364da2661108",
			"url": "https://doc.rust-lang.org/std/io/enum.ErrorKind.html#variant.InvalidInput"
		},
		{
			"source": "af854a3a-2127-422b-91ae-364da2661108",
			"url": "https://doc.rust-lang.org/std/os/windows/process/trait.CommandExt.html#tymethod.raw_arg"
		},
		{
			"source": "af854a3a-2127-422b-91ae-364da2661108",
			"url": "https://doc.rust-lang.org/std/process/struct.Command.html"
		},
		{
			"source": "af854a3a-2127-422b-91ae-364da2661108",
			"url": "https://doc.rust-lang.org/std/process/struct.Command.html#method.arg"
		},
		{
			"source": "af854a3a-2127-422b-91ae-364da2661108",
			"url": "https://doc.rust-lang.org/std/process/struct.Command.html#method.args"
		},
		{
			"source": "af854a3a-2127-422b-91ae-364da2661108",
			"url": "https://github.com/rust-lang/rust/issues"
		},
		{
			"source": "af854a3a-2127-422b-91ae-364da2661108",
			"url": "https://github.com/rust-lang/rust/security/advisories/GHSA-q455-m56c-85mh"
		},
		{
			"source": "af854a3a-2127-422b-91ae-364da2661108",
			"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/N323QAEEUVTJ354BTVQ7UB6LYXUX2BCL/"
		},
		{
			"source": "af854a3a-2127-422b-91ae-364da2661108",
			"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/RPH3PF7DVSS2LVIRLW254VWUPVKJN46P/"
		},
		{
			"source": "af854a3a-2127-422b-91ae-364da2661108",
			"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/W7WRFOIAZXYUPGXGR5UEEW7VTTOD4SZ3/"
		},
		{
			"source": "af854a3a-2127-422b-91ae-364da2661108",
			"url": "https://www.rust-lang.org/policies/security"
		}
	],
	"metrics": {
		"cvssMetricV31": [
			{
				"source": "security-advisories@github.com",
				"type": "Secondary",
				"cvssData": {
					"version": "3.1",
					"vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
					"attackVector": "NETWORK",
					"attackComplexity": "LOW",
					"privilegesRequired": "NONE",
					"userInteraction": "NONE",
					"scope": "CHANGED",
					"confidentialityImpact": "HIGH",
					"integrityImpact": "HIGH",
					"availabilityImpact": "HIGH",
					"baseScore": 10,
					"baseSeverity": "CRITICAL"
				},
				"exploitabilityScore": 3.9,
				"impactScore": 6
			}
		]
	},
	"weaknesses": [
		{
			"source": "security-advisories@github.com",
			"type": "Secondary",
			"description": [
				{
					"lang": "en",
					"value": "CWE-78"
				},
				{
					"lang": "en",
					"value": "CWE-88"
				}
			]
		}
	],
	"vcConfigurations": [
		{
			"nodes": [
				{
					"operator": "",
					"cpeMatch": [
						{
							"vulnerable": true,
							"criteria": "cpe:2.3:a:rust-lang:rust:*:*:*:*:*:*:*:*",
							"matchCriteriaId": "",
							"versionEndExcluding": "1.77.2"
						}
					]
				}
			]
		}
	],
	"vcVulnerableCPEs": [
		"cpe:2.3:a:rust-lang:rust:0.10:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:0.11.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:0.12.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:0.1:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:0.2:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:0.3.1:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:0.3:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:0.4:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:0.5:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:0.65.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:0.66.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:0.67.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:0.6:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:0.72.1:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:0.7:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:0.8:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:0.9:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.0.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.0.0:-:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.0.0:alpha2:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.0.0:alpha:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.0.0:alpha_2:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.0.0:beta:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.1.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.10.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.11.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.12.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.12.1:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.13.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.14.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.15.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.15.1:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.16.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.17.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.18.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.19.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.2.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.20.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.21.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.22.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.22.1:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.23.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.24.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.24.1:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.25.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.26.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.26.1:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.26.2:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.27.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.27.1:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.27.2:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.28.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.29.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.29.1:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.29.2:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.3.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.30.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.30.1:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.31.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.31.1:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.32.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.33.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.34.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.34.1:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.34.2:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.35.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.36.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.37.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.38.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.39.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.4.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.40.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.41.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.41.1:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.42.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.43.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.43.1:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.44.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.44.1:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.45.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.45.1:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.45.2:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.46.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.47.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.48.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.49.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.5.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.50.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.51.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.52.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.53.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.58.1:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.6.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.60.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.61.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.62.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.62.1:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.63.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.64.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.65.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.66.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.66.1:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.67.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.67.1:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.68.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.68.1:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.68.2:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.69.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.7.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.70.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.71.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.71.1:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.72.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.72:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.8.0:*:*:*:*:*:*:*",
		"cpe:2.3:a:rust-lang:rust:1.9.0:*:*:*:*:*:*:*"
	]
}
